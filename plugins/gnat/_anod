#compdef anod

_anod() {
    local context curcontext="$curcontext" state line
    typeset -A opt_args

    local ret=1

    targets=(dotnet-windows e500v2-vx6-linux e500v2-vx6-solaris \
             e500v2-vx6-windows e500v2-vx6cert-solaris e500v2-vx6cert-windows \
             e500v2-wrslinux-linux ia64-hp_linux ia64-sgi_linux leon-elf-linux \
             leon-elf-windows leon3-elf-linux p55-elf-linux p55-elf-windows \
             ppc-aix ppc-elf-solaris ppc-elf-windows ppc-elinos-linux \
             ppc-linux ppc-lynx5-linux ppc-vx6-linux ppc-vx6-solaris \
             ppc-vx6-windows ppc-vx653-windows ppc-vx6cert-linux \
             ppc-vx6cert-windows ppc-vxw-solaris ppc-vxw-windows \
             ppc-wrslinux-linux sparc-solaris sparc64-solaris x86-elinos-linux \
             x86-linux x86-lynx5-linux x86-solaris x86-vx6-linux \
             x86-vx6-solaris x86-vx6-windows x86-windows x86_64-darwin \
             x86_64-linux x86_64-windows)

    mods=(acats-3 acats-4-gnatprove-baseline acats-4-spark acats-4 \
             acats-codepeer-baseline acats-codepeer-full acats-codepeer-slow \
             acats-gnat2xml acats-gnatemulator acats-gnattest \
             acats-gnattest_hash_test acats ace ajis alfatest alt-ergo apex \
             asis asistools atk aunit autoconf automake aws base-gnat binutils \
             cairo cathod-tools closure codepeer-bootstrap codepeer \
             compare_compiler compare_source_pkg compilercommon dejagnu \
             doctools dotnet dsa fixedbugs-alfatest fixedbugs-codepeer-full \
             fixedbugs-codepeer-slow fixedbugs-gnattest fixedbugs-scotest \
             fixedbugs florist fontconfig freetype fsf-testsuite-gcc gaia gcc \
             gdb gdbsim gdkpixbuf gettext glade glib gmon gmp gnat gnatbench \
             gnatcoll gnatcoverage gnatdashboard gnatdocs gnatemulator \
             gnatexamples gnatmem gnatpython gnatquilt gnatstack gnatutil \
             gnatvm gnomethemes gnsa gnu gobjintrospection gprbuild gprconfig \
             gps-gpl gsh gtk3 gtklib gtkplus harfbuzz hicoloricontheme infosys \
             init_source_package intltool ipstack java jstd jvm lab less \
             libbareboard libcroco libelf libexpat libffi libiconv libjpeg \
             libpng librsvg libunwind libxml2 m4 maven modeling mpc mpfr \
             newlib nodejs nsis ocaml ocamlgraph openssl pango phantomjs \
             pixman pkgconfig polyorb python python4gdb python4qm qmachine \
             ravenscar readline recompilablerts rts_zfp scotest spark \
             spark2014 stable-gnat stable-spark templates_parser valgrind \
             vms_staging vx6cert why3 win32ada wposix xmlada zfp_support zlib)

    _arguments -C \
        '(- : *)'{-h,--help}'[display help information]' \
        '(- : *)'{-f,--force}'[create the sandbox even if it already exist]' \
        '(- : *)'{-v,--verbose}'[add some verbosity for debugging purposes. Overrides --log-level]' \
        '--log-file=[add some logs into the specified file]: :_files' \
        '--log-level=[defines a loglevel (RAW,DEBUG,INFO,ERROR) for stdout]: :(RAW DEBUG INFO ERROR)' \
        '--process=[GAIA process name (default: <not set>)]: :_urls' \
        '--target=[set target]: :($targets)' \
        '--host=[set host]' \
        '--build=[set build]' \
        '--build-id=[revision of the source repository]:number' \
        '--offline[activate offline mode: do not query cathod servers, do not send email,...]' \
        '(--enable-color)'--enable-color'[enable colors in log outputs]' \
        '(--anod-via-vcs)'--anod-via-vcs'[access Anod configuration files and specs via git]' \
        '(--gaia --no-gaia)'--gaia'[enable notifications & reports to GAIA (default: disabled)]' \
        '(--gaia --no-gaia)'--no-gaia'[disable notifications & reports to GAIA (default: disabled)]' \
        '(--publish --no-publish)'--publish'[enable storage of binaries in Cathod (default: disabled)]' \
        '(--publish --no-publish)'--no-publish'[disable storage of binaries in Cathod (default: disabled)]' \
        '(--style-checks --no-style-checks)'--style-checks'[enable error if .anod spec files do not pass PEP8/Pyflakes checks (default: enabled)]' \
        '(--style-checks --no-style-checks)'--no-style-checks'[disable error if .anod spec files do not pass PEP8/Pyflakes checks (default: enabled)]' \
        '(--vcs --no-vcs)'--vcs'[enable retrieving of sources using VCS (git/svn) instead of Cathod (default: enabled)]' \
        '(--vcs --no-vcs)'--no-vcs'[disable retrieving of sources using VCS (git/svn) instead of Cathod (default: enabled)]' \
        '(--doc --no-doc)'--doc'[enable build documentation (default: disabled)]' \
        '(--doc --no-doc)'--no-doc'[disable build documentation (default: disabled)]' \
        '1: :_anod_cmds' \
        '*::arg:->args' \
    && ret=0

    case $state in
        (args)
            curcontext="{$curcontext%:*:*}:anod-cmd-$words[1]:"
            case $line[1] in
                (source)
                    _arguments \
                        '(- : *)'{-h,--help}'[display help information]' \
                        '--reset-build-space[reset the build space before running source]' \
                        '--assume-unchanged[do not create a new package but send the metadata to Cathod]' \
                        '--force-repackage[force recreation of the source packages]' \
                        '(-j --jobs)'{-j,--jobs=}'[number of jobs run in parallel]:number' \
                        '--qualifier=[set the build qualifier]' \
                        '--debug[spawn a shell after a build/test error]' \
                        '--dump-dependency-data=[dump dependency data in a JSON format]: :_files' \
                        '--global-state[dump action status in sandbox/status]' \
                        '1:MODULE_NAME:($mods)'
                    ;;
                (build)
                    _arguments \
                        '(- : *)'{-h,--help}'[display help information]' \
                        '--reset-build-space[reset the build space before running source]' \
                        '--assume-unchanged[do not create a new package but send the metadata to Cathod]' \
                        '--force-repackage[force recreation of the source packages even if build is skipped]' \
                        '(-j --jobs)'{-j,--jobs=}'[number of jobs run in parallel]:number' \
                        '--qualifier=[set the build qualifier]' \
                        '--debug[spawn a shell after a build/test error]' \
                        '--nobuild[download and extract files only]' \
                        '--update-vcs[update vcs checkouts]' \
                        '--build-missing-deps[build missing install dependencies (enabled only if --all is used)]' \
                        '--disable-deps-update-msgs[disable notification about updated dependencies (internal)]' \
                        '--disable-source-install[skip source update check and installation(useful for debug)]' \
                        '--all[build the modules and all its dependencies]' \
                        '--dump-dependency-data=[dump dependency data in a JSON format]: :_files' \
                        '--global-state[dump action status in sandbox/status]' \
                        '1:MODULE_NAME:($mods)'
                    ;;
                (download)
                    _arguments \
                        '(- : *)'{-h,--help}'[display help information]' \
                        '--reset-build-space[reset the build space before running source]' \
                        '(-j --jobs)'{-j,--jobs=}'[number of jobs run in parallel]:number' \
                        '--timeout=[when set wait for N minutes for package availability]:N' \
                        '--qualifier=[set the build qualifier]' \
                        '--debug[spawn a shell after a build/test error]' \
                        '--dump-dependency-data=[dump dependency data in a JSON format]: :_files' \
                        '--global-state[dump action status in sandbox/status]' \
                        '--download-args=[list of parameters passed to Cathod to download the package]' \
                        '1:MODULE_NAME:($mods)'
                    ;;
                (install)
                    _arguments \
                        '(- : *)'{-h,--help}'[display help information]' \
                        '--reset-build-space[reset the build space before running source]' \
                        '(-j --jobs)'{-j,--jobs=}'[number of jobs run in parallel]:number' \
                        '--timeout=[when set wait for N minutes for package availability]:N' \
                        '--qualifier=[set the build qualifier]' \
                        '--debug[spawn a shell after a build/test error]' \
                        '--dump-dependency-data=[dump dependency data in a JSON format]: :_files' \
                        '--global-state[dump action status in sandbox/status]' \
                        '--download-args=[list of parameters passed to Cathod to download the package]' \
                        '1:MODULE_NAME:($mods)'
                    ;;
                (deploy)
                    _arguments \
                        '(- : *)'{-h,--help}'[display help information]' \
                        '--reset-build-space[reset the build space before running source]' \
                        '(-j --jobs)'{-j,--jobs=}'[number of jobs run in parallel]:number' \
                        '--qualifier=[set the build qualifier]' \
                        '--debug[spawn a shell after a build/test error]' \
                        '--dump-dependency-data=[dump dependency data in a JSON format]: :_files' \
                        '--global-state[dump action status in sandbox/status]' \
                        '1:MODULE_NAME:($mods)'
                    ;;
                (test)
                    _arguments \
                        '(- : *)'{-h,--help}'[display help information]' \
                        '--reset-build-space[reset the build space before running source]' \
                        '--assume-unchanged[do not create a new package but send the metadata to Cathod]' \
                        '--force-repackage[force recreation of the source packages even if build is skipped]' \
                        '(-j --jobs)'{-j,--jobs=}'[number of jobs run in parallel]:number' \
                        '--qualifier=[set the build qualifier]' \
                        '--debug[spawn a shell after a build/test error]' \
                        '--skip-if-ok[if the test result is found and is OK skip the test]' \
                        '--report[show testsuite report after the tests]' \
                        '--notest[download and extract files only]' \
                        '--update-vcs[update vcs checkouts]' \
                        '--test-name=[run a single test]' \
                        '--build-missing-deps[build missing install dependencies (enabled only if --all is used)]' \
                        '--disable-deps-update-msgs[disable notification about updated dependencies (internal)]' \
                        '--disable-source-install[skip source update check and installation(useful for debug)]' \
                        '--all[build the modules and all its dependencies]' \
                        '--dump-dependency-data=[dump dependency data in a JSON format]: :_files' \
                        '--global-state[dump action status in sandbox/status]' \
                        '1:MODULE_NAME:($mods)'
                    ;;
                *)
                    _call_function ret _anod_cmd_$words[1] && ret=0
                    (( ret )) && _message 'no more arguments'
                    ;;
            esac
            ;;
    esac
}

_anod_cmds() {
    local commands; commands=(
        'source:create source packages'
        'build:build a module'
        'download: download a package'
        'install: install a package'
        'deploy: deploy an install in another PREFIX'
        'test: test a module'
    )
    _describe -t commands 'command' commands "$@"
}

_anod "$@"
